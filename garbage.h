#ifndef GARBAGE_H
# define GARBAGE_H

void					calc_color(t_minirt *minirt, t_hit *hit);
t_color					apply_color(t_color c1, t_color c2, doubl);
int						close_button(t_var *var);
void					*mlx_new_image(t_xvar *xvar, int width, int height);
int						close_key(int keycode, t_var *var);
void					check_norm_vec(char *s, t_minirt *m);
void					check_xyz_point(char *s, t_minirt *m);
int						vec_new(t_vec *vector, size_t type_size);
void					check_square(char *s, int p, t_minirt *m);
void					check_light(char *s, int p, t_minirt *m);
void					test_ft_memcpy_basic_test(void *ptr));
void					ft_free_line_and_exit(t_data *data, char *line,
						char *errstr, int linenr);
int						fill_bmp_buff(t_bitmap *bmp, t_minirt *minirt,
						char *img_addr);
void					bench_ft_strlen_smallbench(void *ptr, void *vsptr));
void					write_info_header(int fd,
						t_bmp_info_header *info_header);
void					ft_tile_delone(t_tile **root, t_tile *todel);
void					test_ft_strlcat_empty1(void *ptr));
void					ft_swap_d(double *a, double *b);
void					ft_proj_move(t_proj **list, t_tile **map);
void					test_ft_strlen_zero(void *ptr));
void					ft_proj_delone(t_proj **list, t_proj *todel);
void					ft_proj_coll_chk(t_tile **map, t_proj *proj);
void					ft_print_sides(t_coord pos);
void					lstdelone_f(void *d));
void					test_ft_striteri_null1(void *ptr));
int						ft_parser(t_ptr *p, char *chemin);
void					ft_print_lines(t_coord pos);
bool					env_unset(t_mshell *mshell, char *name,
						bool enforce_ro);
void					ft_print_corner(t_coord pos);
void					ft_player_restrain(t_tile **map, t_player *player,
						char instr);
void					ft_object_draw(t_game *data, t_tile *tile,
						t_coord pos);
void					test_ft_strrchr_basic2(void *ptr));
void					test_ft_strlcat_return(void *ptr));
void					set_eat_time(t_philo *phil);
char					ft_myscanf(void);
void					test_ft_strnstr_zero(void *ptr));
char					**ft_map_reader(int fd);
char					**ft_map_realloc(char **old);
void					valid_flr_ceiling_two(t_ray *ray, char **info);
void					*ft_map_error(int error);
t_game					*ft_game_init(int argc, char **input);
void					test_ft_strcmp_null2(void *ptr));
void					ft_coord_update(t_coord *old, char instr);
void					philosopher_eat(t_philo *phil, int *eatcount);
void					make_scene(t_minirt *minirt);
int						take_forks(t_philo *phil);
void					start_philosopher(t_philo *phil);
void					test_ft_strstr_zero_len1(void *ptr));
int						free_shit(pthread_t *threads, t_philo *philosophers,
						int ret);
void					*start_philosopher(void *param);
int						grab_forks(t_philo *phil);
int						mr_manager(t_philo *philosophers, t_data *data);
void					ft_crossout_hor(int *squares, int cur_square,
						int player, int end);
int						init_struct(t_data *data, int argc, char **argv);
int						mouse_win3(int x, int y, void *p);
unsigned int			ft_pixel_from_img(t_ray *ray, int x, int y);
void					ft_print_integertable(int *array, int size);
int						mlx_int_file_get_rid_comment(char *ptr, int size);
int						ft_match(char *str, char c);
void					bench_ft_strchr_smallbench(void *ptr, void *vsptr));
double					*ft_dist_array(t_data *data);
void					test_ft_substr_basic2(void *ptr));
void					test_ft_lstnew_free(void *ptr));
int						ft_strlencskip(char *str, char c);
void					test_ft_bzero_speed(void *ptr));
void					test_ft_strnstr_zero_len2(void *ptr));
int						ft_lray_sphere(t_sphere *sphere, t_raydata *rdata);
void					test_ft_strmap_zero(void *ptr));
void					ms_set_procname(t_mshell *mshell, char *procname);
size_t					ft_strlcat(char *dest, const char *src,
						size_t dstsize);
int						ft_assign_word(char *result, char *str, int i);
void					ft_vects(t_object *obj);
int						word_length(char *str, int start);
void					ft_sig_user_interupt(int s));
long					ft_power(long n, int pow);
void					*ft_memccpy(void *dst, const void *src, int c,
						size_t n);
void					ft_header_write(t_ray *ray);
void					test_ft_strcpy_return(void *ptr));
int						ft_second_split(char *final, char **rushes,
						unsigned char result);
int						get_last_malloc_size(void));
void					*ft_memmove(void *dst, const void *src, size_t len);
void					test_ft_islower(void));
int						mipng_magic(unsigned char *ptr, int size);
void					ft_cd(int argc, char **argv, t_list *env);
void					ft_print_comb3(void);
t_color					ft_get_cercles(t_object *o, t_hit *rec,
						t_noise *noise);
void					ft_save_input(t_ray *ray, char *file);
void					ft_mlx_pixel_to_img(t_data *data, int x, int y,
						t_col color);
void					test_ft_strlcpy_min(void *ptr));
char					*mlx_int_get_line(char *ptr, int *pos, int size);
void					ft_pwd(int argc, char **argv, t_list *env);
void					std_exit(t_msh *prog, int n);
void					ft_display_moves(t_ptr *p);
void					test_ft_strnstr_null1(void *ptr));
void					ft_free_lights(t_light **light);
void					prompt(t_mshell *mshell);
int						ft_solve_quartic(double w[5], double s[4]);
int						rush_00(char prev, int x, int y);
int						ft_isdigit(int c);
void					run_subtests(void *h, int start));
void					get_res(char *s, int p, t_minirt *m);
void					ft_check_data(t_ptr *p);
t_vec					ft_camera_transform(t_data *data, t_vec cam_p,
						t_prop transform);
void					bench_ft_memcmp_medbench(void *ptr, void *vsptr));
void					cast_sprite(t_ray *ray);
int						ft_atoi(const char *str);
t_drawer				ft_drawer_init(int x, int start, int end,
						t_color color);
int						ft_isalpha(int c);
void					fremashin(char **words, int j);
void					test_ft_strncpy_final_0(void *ptr));
void					char_array_my_map(t_ray *ray);
void					ft_putnbr_fd(int n, int fd);
void					*ft_calloc(size_t count, size_t size);
int						mouse_win2(int button, int x, int y, void *p);
void					test_ft_strstr_speed(void *ptr));
void					ft_cam_light_event(int key, t_ptr *p);
void					ft_print_comb2(void);
int						ft_is_whitespace(int c);
void					genocide(t_data *data);
int						ft_isinset(char c, const char *set);
char					*ft_strdupc(char *str, char c);
double					ft_abs_d(double x);
void					bench_ft_strlcat_smallbench(void *ptr, void *vsptr));
int						ft_isprint(int c);
double					ffmin(double a, double b);
double					ft_angle_between(t_vector a, t_vector b);
void					test_ft_atoi_basic(void *ptr));
void					ft_direction_init(t_data *data);
int						free_line_and_close(int fd, char *line);
void					test_ft_lstsize_null(void *ptr));
char					*ft_strcapitalize(char *str);
void					test_ft_substr_malloc_null(void *ptr));
int						mipng_fill_img(void *img, unsigned char *buf,
						png_info_t *pi);
char					*ft_strmapi(const char *s, char (*f)(unsigned int,
						char));
int						ft_shading(t_scene *scene, t_vector lpos, t_light *l);
char					**ft_split_whitespace(char *str);
int						ft_factorial(int nbr, int power);
int						mlx_int_get_text_rgb(char *name, char *end);
void					fork_and_exec(char **args, t_list *env);
void					ft_putendl(char const *s);
void					test_ft_strlcat_electric_memory(void *ptr));
void					check_camera(char *s, int p, t_minirt *m);
int						rush_checker(char prev, char opt1, char opt2);
int						ft_statemachine(char valid1, char valid2, int result1,
						int result2);
char					**env_to_envp(t_mshell *mshell);
void					print_data(t_data data);
t_vector				ft_rotcam_y(t_vector old, double theta);
void					test_ft_itoa_size2(void *ptr));
int						ft_isupper(int chr);
int						ft_mlx_init(t_data *data);
char					*ft_wordsplit(char *str);
size_t					ft_strcspn(const char *s, const char *reject);
unsigned int			ft_put_text_north(t_ray *ray, unsigned int color,
						int y);
void					test_ft_memcpy_speed(void *ptr));
void					traverse_cam_list(t_camera_list **head);
int						ft_str_is_uppercase(char *str);
void					test_ft_memmove_hard(void *ptr));
void					test_ft_strncmp_cast(void *ptr));
void					start_calc(t_ray *ray, int x);
int						ft_bot_statemachine(char prevprev, char prev,
						char current, char *rush);
void					ft_putchar_fd(char c, int fd);
void					ft_lstadd(t_list **alst, t_list *new);
void					test_ft_isalnum_(void *ptr));
void					bench_ft_atoi_fatbench(void *ptr, void *vsptr));
void					ft_init_ceiling(t_data *data, char *line, int i,
						int linenr);
void					test_ft_itoa_size(void *ptr));
int						ft_str_is_lowercase(char *str);
void					ft_ultimate_div_mod(int *a, int *b);
char					**ft_str2tokc(char **input, char c);
int						ft_fieldfinder();
void					ft_validate_map(t_data *data);
int						ft_sort_string(char *str1, char *str2);
void					test_ft_memchr_unsigned(void *ptr));
void					ft_map_edit(t_data *data, char **reachable);
void					test_ft_lstmap_malloc_null(void *ptr));
void					test_ft_strncat_empty2(void *ptr));
int						get_r(int trgb);
void					ft_export(int argc, char **argv, t_list *env);
int						write_tests(void);
void					init(t_ray *ray);
size_t					ft_strspn(const char *s, const char *accept);
int						height_start(char **map, int max_height, int x);
void					ft_data_read(t_data *data, int fd);
void					test_ft_strdup_electric_memory(void *ptr));
void					ft_print_comb(void);
void					test_ft_strncat_unicode(void *ptr));
char					*ft_strchr(const char *str, int c);
void					*ft_memcpy(void *dst, const void *src, size_t n);
int						ft_rush_top(char prevprev, char prev, char *rush,
						int result);
char					*get_file_path(char *program, char *path);
int						ft_isalnum(int c);
long long				is_builtin(char *program);
void					test_ft_strlcpy_zero(void *ptr));
void					test_ft_strstr_same_ptr(void *ptr));
int						ft_mlx_exit(t_data *data);
t_line					ft_linedata(t_data *data, double dist, int x);
t_list					*ft_create_elem(void *data);
int						ft_word_assign(char *result, char *str, char *charset,
						int i);
char					*ft_strstr(const char *str, const char *to_find);
char					*get_envvar_value(t_list **env, char *varname);
double					ft_xy_angle(t_vector v);
char					*ft_itoa(int n);
int						ft_tolower(int c);
int						ft_solve_cubic(double w[4], double s[3]);
int						ft_hit_perforated_cube(t_object *o, t_ray *ray,
						t_interval t, t_hit *r);
int						ft_count_words(char *str);
char					*ft_add_to_id(char *id, char *line, int *c, int *i);
int						ft_esc_oct(char *str);
t_color					diffuse(t_scene *s, t_light *l);
void					ft_dda(t_data *data, t_dda *dda);
int						ft_hit_triangle(t_object *o, t_ray *r, t_interval t,
						t_hit *rrr);
void					ft_lstclear(t_list **lst, void (*del)(void *));
void					check_cylinder(char *s, int p, t_minirt *m);
char					*ft_realloc(char *str, char *buffer, int bytes_read);
int						ft_rush_bot_filtering(char prevprev, char prev,
						char *rush, int result);
void					ft_sprite_dist(t_data *data);
char					*ft_increment(char *numbers);
void					test_ft_striteri_null2(void *ptr));
double					ft_atod_loop(char *s, t_minirt *m, int mod);
int						ft_fix_rec(t_hit *old, t_hit *new);
int						ft_iterative_factorial(int nb);
void					ft_zeropad(int fd, int len);
void					ft_valid_text(t_ray *ray, char **info);
int						ft_mid_statemachine(char prevprev, char prev,
						char current, char *rush);
void					ft_background(t_ptr *p);
void					ft_print_numbers(void);
char					*path_find_file(t_mshell *mshell, char *name,
						bool executable);
void					test_ft_strstr_basic2(void *ptr));
void					ft_merge_sort(t_data *data, int s, int e);
void					test_ft_split_space(void *ptr));
void					test_ft_strlcat_basic2(void *ptr));
void					ft_init_res(t_data *data, char *line, int i,
						int linenr);
int						ft_clamp_int(int value, int min, int max);
void					bench_ft_strcmp_smallbench(void *ptr, void *vsptr));
void					test_ft_strncat_basic2(void *ptr));
void					ft_save_img(t_ptr *p);
size_t					ft_strslen(char *str, char *set);
void					ft_error(int mod);
double					ft_distget(t_data *data, int *index, int id);
void					*ft_memalloc(size_t size);
void					test_ft_lstadd_front_free(void *ptr));
int						ft_recursive_factorial(int nb);
char					**parsing(t_list *env, char *input);
double					ft_rand48(void);
void					test_ft_isupper_(void *ptr));
int						ft_lstsize(t_list *lst);
int						ft_hex(const char *str);
t_vec3					setsquare(t_vec3 pos, t_vec3 norm_vec);
void					ft_bmp_header(t_data *data);
void					ft_lstdelone(t_list *lst, void (*del)(void *));
void					error_exit(t_msh *prog, int err);
void					test_ft_strcat_null2(void *ptr));
void					test_ft_strrchr_speed(void *ptr));
void					ft_save_east_text(t_ray *ray, char *path);
void					add_object(t_object_list **head, int type,
						void *scene);
void					test_ft_strnequ_basic2(void *ptr));
bool					ms_set_error(t_mshell *mshell, t_errno ms_errno,
						char *procname);
int						*shrink_to_fit(int *array, int size);
void					msh_main(t_msh *prog);
void					test_ft_strncmp_null2(void *ptr));
char					*error_lookup(int err);
int						ft_strcmp(const char *s1, const char *s2);
void					ft_print_2dfield(char **field);
void					test_ft_strncmp_zero2(void *ptr));
void					test_ft_strmap_free(void *ptr));
void					move(int goalx, int goaly, int *posx, int *posy);
void					check_plane(char *s, int p, t_minirt *m);
int						ft_rush_bot(char prevprev, char prev, char *rush,
						int result);
t_vec					ft_sprite_transform(t_data *data, int i);
void					ft_sort_params(int argc, char **argv);
void					ft_img_to_bmp(t_ray *ray);
long long				ft_str2cmpstr(const char **str2, char *str);
t_color					ft_color_init(int r, int g, int b);
t_scene					*ft_copy_scene(t_scene *old);
void					signal_handler(int signal);
void					test_ft_strrchr_zero(void *ptr));
void					test_ft_putendl_fd_basic(void *ptr));
void					run_cmd(t_mshell *mshell, char *cmd);
void					test_ft_atof_negative(void *ptr));
void					ft_detect(t_object *new, t_object *old, int x);
void					test_ft_strchr_null(void *ptr));
double					ft_dist_calc(t_data *data, t_dda *dda);
unsigned int			ft_put_sprite(t_ray *ray, unsigned int color, int y);
void					test_ft_lstlast_null(void *ptr));
void					ft_perror_exit(void);
int						mlx_destroy_image(t_xvar *xvar, t_img *img);
char					*ft_vtoa(t_vector v);
void					test_ft_memmove_overlap_rev(void *ptr));
int						error(char *errmsg);
void					find_hit_light(t_minirt *minirt, t_ray *ray, double l,
						t_hit *hit_p);
void					test_ft_memchr_faraway(void *ptr));
void					ft_step_init(t_cam cam, t_dda *dda);
t_list					*ft_get_info(char prev);
void					test_ft_memcpy_return(void *ptr));
void					retrieve_square(voi);
void					test_ft_strtrimc_basic(void *ptr));
void					sprite_draw_calc(t_ray *ray);
void					ft_mlx_key_init(t_data *data);
void					ft_unset(int argc, char **argv, t_list *env);
void					*mlx_int_parse_png(void *xvar, unsigned char *fptr,
						int size, int *width, int *height);
void					ft_putchar(char c);
void					ft_strrev(char *str);
void					ft_add_light(t_light *light[2], t_ptr *p, int fd,
						char **line);
int						is_newline(char *buffer, char **line, int bytes_read);
void					test_ft_putendl_fd_null(void *ptr));
int						ft_escaper(char *str, char *last);
void					test_ft_strcat_basic(void *ptr));
void					ft_obj_col(t_ptr *p, t_object *obj, char **line);
int						ft_atoi_interpreted(char *str, int base);
void					ft_add_object(t_ptr *p, int fd, char **line, int t);
void					ft_error_line(int line);
void					pp_my_map(t_ray *ray, char *line);
void					ft_freedom(t_data *data);
int						ft_strequ(char const *s1, char const *s2);
t_vector				ft_vfloor(t_vector v);
void					make_cam_head(t_camera_list **head);
void					env_free(t_env *env);
t_color					ft_tracer(t_thread *p, t_ray *r, int d);
int						ft_map_size(char **map);
int						ft_str_is_printable(char *str);
void					print_map(t_ray *ray);
void					get_ambient_light(char *s, int p, t_minirt *m);
void					clean_buffer(char *buffer, int bytes_read, int full);
void					ft_map_placeplayer(t_data *data, int x);
int						ft_putstr_fd(const char *s, int fd, int ret);
void					initialize_array(char *str, int size);
t_com					ft_specific_julia(int choix);
void					test_ft_strtrimc_zero(void *ptr));
void					ft_filter_mb(int *data);
char					*ft_strnstr(const char *str, const char *needle,
						size_t len);
void					ft_line_draw(t_data *data, t_dda *dda, t_line line,
						t_texdata tex);
int						init_mutexes(t_data *data);
char					**mlx_int_str_to_wordtab(char *str);
void					bench_ft_strcpy_fatbench(void *ptr, void *vsptr));
void					save_ceiling(t_ray *ray, char **value);
void					initialize_philosopher(t_philo *philosopher,
						t_data *data, int i);
int						check1(const char *str, const char *to_find, size_t i);
void					test_ft_strcmp_after_0(void *ptr));
int						mipng_crc(unsigned char *ptr, int len);
char					*ft_strcat(char *s1, const char *s2);
void					retrieve_cylinder(voi);
void					ft_putstr_non_printable(char *str);
void					ft_new_window(t_data *data);
int						ft_place_queens(char *board, int y, int n);
int						ft_word_length(char *str, int i);
void					start_text_north(t_ray *ray);
void					bench_ft_strncat_fatbench(void *ptr, void *vsptr));
size_t					ft_strlcpy(char *dest, const char *src,
						size_t dstsize);
void					ft_list_foreach(t_list *begin_list, void (*f)(void *));
int						ft_stringquote(char *str);
void					path_update_from_env(t_mshell *mshell);
char					*ft_strrchr(const char *str, int c);
void					test_ft_strmapi_free(void *ptr));
void					valid_flr_ceiling(t_ray *ray, char **info);
void					test_ft_strtrim_basic2(void *ptr));
t_object				*two_x_case(t_object *new, t_object *old);
int						print_key(int keycode, t_var *var);
void					test_ft_strcat_null_byte(void *ptr));
void					map_read_start(t_ray *ray, char *line);
void					test_ft_strnew_zero(void *ptr));
void					ft_data_errorcheck(t_data *data, int linenr,
						char *line);
void					test_ft_atoi_max_long(void *ptr));
void					ft_sort(int *left, int *right, t_data *data,
						t_merger *merge);
void					ft_swap(int *a, int *b);
char					*ft_strdupr(char *orig, char rstart, char rend);
void					move_left(t_ray *ray);
int						ft_rot_obj(t_ptr *p, t_vector (*ft_rot)(t_vector,
						double));
t_player				*ft_player_init(void);
void					test_ft_strcmp_speed(void *ptr));
int						ft_find_next_prime(int nb);
char					ft_start_dir(t_ray *ray, char *str);
void					ft_filter_cartoon(int *data);
void					test_ft_strstr_bad_boyer_moore(void *ptr));
unsigned char			extract_data(char **result, char **rushes);
int						ft_hit_paraboloid(t_object *o, t_ray *ray,
						t_interval t, t_hit *rrr);
void					ft_input_ac_3(int ac, char **av, t_ray *ray);
void					test_ft_memmove_null_byte(void *ptr));
t_color					ft_ray_tracer(t_thread *p, double col, double row);
int						whitespace_counter(char *str);
void					valid_sprite_check(t_ray *ray, char **info);
void					*mlx_int_xpm_f_image(t_xvar *xvar, int *width,
						int *height, int (*xpm_func)(), void *param);
void					test_ft_strstr_zero_len2(void *ptr));
t_ray					ft_ray(t_vector a, t_vector b);
void					test_ft_atof_blanks2(void *ptr));
void					ft_put_pixel(t_ray *ray, unsigned int color, int y,
						int x);
int						ft_hit_disk(t_object *o, t_ray *r, t_interval t,
						t_hit *rrr);
void					test_ft_memccpy_to_small(void *ptr));
char					*ft_rush_table(char l_corner, char r_corner,
						char x_middle, char y_middle);
void					test_ft_strcat_electric_memory(void *ptr));
void					test_ft_strrchr_unicode(void *ptr));
void					test_ft_strdup_malloc_null(void *ptr));
int						mlx_mouse_hook(t_win_list *win, int (*funct)(),
						void *param);
void					ft_direction_rot(t_data *data, double angle);
void					ft_validate_mapwall(t_data *data, char *field,
						int start);
void					draw_vert_line(t_ray *ray, int x);
void					test_ft_memmove_malloc(void *ptr));
int						handle_press(int keycode, t_ray *ray);
t_vector				ft_vabs(t_vector v);
void					test_ft_strncmp_zero1(void *ptr));
void					comb_sort_ex(int *order, double *dist, t_sort *sort);
void					start_text_south(t_ray *ray);
void					test_ft_strnstr_basic5(void *ptr));
char					*(*fp[5]) (void *b, int c, size_t n);
unsigned int			ft_put_text_west(t_ray *ray, unsigned int color,
						int y);
void					save_sprites(t_ray *ray);
int						**ft_xrange(int min, int max, int **array);
void					ft_list_sort(t_list **begin_list,
						int (*cmp)(void *data1, void *data2));
void					ft_png_del(t_data *data, t_png *png);
void					ft_get_object(t_ptr *p, t_object *obj, int fd,
						char **l);
void					*mlx_int_new_xshm_image(t_xvar *xvar, int width,
						int height, int format);
void					set_state(t_philo *phil);
void					start_text_west(t_ray *ray);
void					ft_free_exit(char *display, int err, t_ptr **p);
t_ipoint				ft_linetosoft(t_ptr *p, char **line, int free_it);
unsigned int			ft_put_text_east(t_ray *ray, unsigned int color,
						int y);
char					*ft_trim_space(char *line);
t_coord					ft_coord_init(int width, int height);
t_color					ft_get_noise(t_object *o, t_hit *rec, t_noise *noise);
void					ft_strclr(char *s);
t_vec					ft_cam_rot_z(t_vec pos, t_vec rot);
void					set_play_pos(t_ray *ray, int x, int y);
void					*mlx_xpm_file_to_image(t_xvar *xvar, char const *file,
						int *width, int *height);
int						map_check_2(t_ray *ray, int x, int y);
char					*get_cmd(t_mshell *mshell);
void					change_start_dir(t_ray *ray);
void					test_ft_itoa_max_int(void *ptr));
int						ft_loop_sphere(t_data *data, t_raydata *rdata,
						int raytype);
void					*ft_memset(void *b, int c, size_t len);
void					ft_init_west(t_data *data, char *line, int i,
						int linenr);
void					check_rgb(char *s, t_minirt *m);
int						ft_validate_type(char *str);
t_light					*return_light(t_minirt *minirt, int index);
void					update(t_game *data);
char					*ft_mystrjoin(char *s1, char *s2, int tofree);
int						expose_win2(void *p);
void					ft_write_color(int fd, t_color clr);
char					*ft_strtok(char *str, const char *delim);
void					bench_ft_strncpy_smallbench(void *ptr, void *vsptr));
void					ft_save_south_text(t_ray *ray, char *path);
void					ft_test_vars(t_ray *ray);
void					fork_philosopher(t_philo philosopher);
void					ft_mlx_img_to_win(t_data *data);
int						ft_iterative_power(int nb, int power);
t_vector				ft_rot_y(t_vector old, double theta);
int						ft_deal_key(int key, t_ptr *p);
void					test_ft_lstadd_front_null(void *ptr));
int						len_end(char *str);
char					**ft_str2clean(char **orig);
bool					ms_set_error_from_no(t_mshell *mshell, char *procname,
						char *err);
void					test_ft_strcmp_basic2(void *ptr));
char 					*ft_strjoin(char *s1, char *s2);
void					ft_printer(char *numbers, int n);
void					check_map(char *map, t_minirt *minirt);
void					bench_ft_strcpy_medbench(void *ptr, void *vsptr));
int						mipng_data(void *img, unsigned char *dat,
						png_info_t *pi);
void					test_ft_lstmap(void);
int						ft_hit(t_scene *s, t_ray r, t_interval t, t_hit *rec);
void					test_text_value(t_ray *ray);
void					test_ft_memset_unsigned(void *ptr));
void					test_ft_strnew_free(void *ptr));
char					**ft_strsplit(const char *str, char c);
void					test_ft_strmap_null1(void *ptr));
void					ft_raise(int s));
int						strcpy_tests(void);
void					test_ft_lstdelone(void));
t_color					ft_texture_get(t_data *data, t_dda *dda, int x, int y);
int						mlx_expose_hook(t_win_list *win, int (*funct)(),
						void *param);
int						ft_base_to_nbr(char *str);
int						mlx_int_wait_first_expose(t_xvar *xvar);
void					bench_ft_memmove_medbench(void *ptr, void *vsptr));
char					*get_full_text(const int fd);
void					ft_data_identifier(t_data *data, char *line,
						int linenr);
void					bench_ft_strncmp_fatbench(void *ptr, void *vsptr));
int 					leave_window(void);
void					test_ft_strmapi_size(void *ptr));
void					*mlx_new_window(t_xvar *xvar, int size_x, int size_y,
						char const *title);
int						ft_player_move(t_game *data, char instr);
int						ft_mapcheck(char **map, int x, int y, int maxdepth);
t_vector				ft_cross(t_vector a, t_vector b);
void					calc_wall_height(t_ray *ray);
void					test_ft_strndup_last_char(void *ptr));
void					ft_map_validate(t_data *data, char *str, int i,
						int linenr);
void					ft_btree_search_inorder(t_btree **start);
t_vector				normal_torus(const t_object obj,
						const t_vector hit_point);
void					test_ft_strdel_test(void *ptr));
void					ft_init(t_ptr *p);
void					ft_is_negative(int n);
double					ft_yz_angle(t_vector v);
unsigned long			get_time_ms(void);
void					calc_south_text(t_ray *ray);
int						mipng_structure(unsigned char *ptr, int size,
						unsigned char **hdr, unsigned char **dat);
int						ft_menu_event(int key, t_ptr *p);
void					*mlx_init();
void					ft_lstdel(t_list **alst, void (*del)(void *, size_t));
int						ft_list_size(t_list *begin_list);
char					*ft_strsub(char const *s, unsigned int start,
						size_t len);
t_loopf					ft_loop_funct(int id);
void					test_ft_strdup_null(void *ptr));
t_vec3 					vec_x_d(t_vec3 *v, double x);
void					test_ft_atoi_null(void *ptr));
int						ft_str_is_alpha(char *str);
void					ft_raycast(t_data *data);
void					add_camera(t_camera_list **head, t_cam *cam);
char					*ft_rush_firstline(void);
void					ft_string_append(char *dest, char *source, int start,
						int len);
int						ft_hit_cone(t_object *o, t_ray *r, t_interval t,
						t_hit *rrr);
long long				ft_str2ncmpstr(const char **str2, char *str);
void					ft_get_res(t_ray *ray, char **info);
t_color					ft_pro_c(t_color a, t_color b);
char					ft_player_update(char instr);
t_btree					*ft_btree_create_inorder_tree(int *table, int size);
void					ft_init_east(t_data *data, char *line, int i,
						int linenr);
void					ft_list_remove_if(t_list **begin_list, void *data_ref,
						int (*cmp)());
int						height_end(char **map, int max_height, int x);
void					ncurses_loop(void);
void					*mlx_int_new_image(t_xvar *xvar, int width,
						int height, int format);
void					fd_to_buffer(int fd));
char					*mlx_get_data_addr(t_img *img, int *bits_per_pixel,
						int *size_line, int *endian);
int						key_win1(int key, void *p);
void					start_text_east(t_ray *ray);
double					ffmax(double a, double b);
void					test_ft_strequ_electric_memory(void *ptr));
char					*ft_copy_imgdata(int *img, int width, int height);
t_list					*list_maker(char *str);
bool					env_set(t_mshell *mshell, char *name, char *value,
						bool read_only);
int						mlx_int_get_visual(t_xvar *xvar);
t_hit					intersect_square(t_ray *ray, t_squ *square);
void					test_ft_memchr_electric_memory(void *ptr));
void					ft_env(int argc, char **argv, t_list *env);
void					test_ft_strncmp_basic1(void *ptr));
t_camera				ft_init_camera(t_vector lookfrom, t_vector lookat,
						double vfov);
double					vec_distance(t_vec3 *v1, t_vec3 *v2);
void					init_signal(t_mshell *mshell);
void					ft_save_sprite(t_ray *ray, char *path);
t_color					ft_color(int iter, t_noise *noise);
void					ft_void_pointers(void *array, void *data);
void					ft_pos(t_object *o);
int						ft_first_split(char *final, char **rushes);
int						no_conflict_hor_vert(t_board stats, int *board);
int						*make_int_table(int min, int max);
t_vector				ft_rand1dto3d(float value);
int						ft_convert_field(char **field, char *output);
int						print_mouse_pos(int x, int y);
void					remove_object_node(t_object_list **head, int type);
void					test_ft_strlen_speed(void *ptr));
t_hit					intersect_triangle(t_ray *ray, t_tri *triangle);
int						ft_top_statemachine(char prevprev, char prev,
						char current, char *rush);
void					test_ft_strcpy_speed(void *ptr));
void					test_ft_strmapi_malloc_null(void *ptr));
void					*mlx_xpm_to_image(t_xvar *xvar, char **xpm_data,
						int *width, int *height);
void					ft_mlx_key_update(t_data *data, int keycode,
						int state);
void					add_img(t_img_list **head, voi);
int						get_next_line(int fd, char **line);
void					test_ft_putstr_basic(void *ptr));
void					exec_builtin(char **args, int id, t_list *env);
double					ft_mind3(double a, double b, double c);
void					bench_ft_strrchr_medbench(void *ptr, void *vsptr));
void					sandbox(void));
t_color					ft_div_kc(t_color a, double k);
void					ft_sprite_loop(t_data *data);
double					ft_xz_angle(t_vector v);
int						ft_atoi_base(char *str, char *base);
int						ft_cray_sphere(t_sphere *sphere, t_raydata *rdata);
void					bench_ft_strnstr_smallbench(void *ptr, void *vsptr));
void					test_ft_strnstr_basic3(void *ptr));
void					test_ft_atof_max(void *ptr));
int						free_everything(t_ray *ray, int fd, char *line);
void					update_envvar(t_list *var, char *name, char *value);
void					perform_dda(t_ray *ray);
double					ft_maxd3(double a, double b, double c);
char					*read_file(int fd, char *temp);
int						word_counter(char *str);
void					*mlx_new_image2(t_xvar *xvar, int width, int height);
void					ft_free_twodim(char ***to);
void					ft_ft(int *nbr);
t_pla					*get_plane(char *s, int p, t_minirt *m);
double					ft_length(t_vector a);
void					unsandbox(void));
void					ft_cam_rotation(int key, t_ptr *p);
int						ft_validate(char prev);
int						parse(int result, char **line, char **str);
void					ft_filter_mb1(t_ptr *p, int *data);
int						ft_hit_plane(t_object *o, t_ray *r, t_interval t,
						t_hit *rrr);
void					ft_init_floor(t_data *data, char *line, int i,
						int linenr);
int						ft_cray_tri_in(t_trngl *tri, t_vec normal, t_vec hit);
int						ft_mlx_keydown(int keycode, void *param);
void					test_res_value(t_ray *ray);
int						ft_string_cmp(char *str1, char *str2);
void					ft_add_conts(t_object *o, t_vector r, int x,
						t_object *tete);
void					test_ft_isnumber_(void *ptr));
void					ft_print_field(char *field);
int						mlx_do_key_autorepeatoff(t_xvar *xvar);
void					create_images(t_minirt *minirt);
int						ft_islower(int chr);
void					ft_begin(t_ptr *p);
t_vector				ft_rand_in_sphere(t_vector center, double radius);
void					generate_ray(t_minirt *minirt);
void					test_ft_strequ_same_pointer(void *ptr));
int						print_mouse_klick(int x, int y, int z);
t_env					*env_get(t_mshell *mshell, char *name);
t_hit					find_hit(t_minirt *minirt, t_ray *ray);
void					calc_west_text(t_ray *ray);
void					test_ft_memcmp_null_byte(void *ptr));
int						ft_hit_cylinder(t_object *o, t_ray *r, t_interval t,
						t_hit *rec);
t_scene					*ft_init_scene(void);
t_vector				ft_reflect(t_vector v, t_vector n);
size_t					ft_strlenr(char *str, char rstart, char rend);
void					ft_list_reverse(t_list **begin_list);
void					check_alight(char *s, int p, t_minirt *m);
int						no_conflict_diag(t_board stats, int *board);
int						check_save(char *str);
int						mlx_int_get_col_name(char *str, int size);
void					traverse_img_list(t_img_list **head);
void					*timer(void *t));
bool					vlad_impaler(t_ray *ray);
char					*specialchar_sep(char *string, char *specialchars);
void					retrieve_plane(voi);
void					test_ft_strcpy_empty(void *ptr));
void					ft_pos_cylinder(t_object *o);
void					test_ft_memcpy_null1(void *ptr));
void					test_ft_strtrim_malloc_null(void *ptr));
t_queue					*ft_make_queue(t_btree *node);
void					ft_tile_addbck(t_game *data, t_tile *new);
void					retrieve_triangle(voi);
void					cub3d(t_ray *ray);
int						sprite_cast_ex(t_ray *ray, int y);
t_cyl					*get_cylinder(char *s, int p, t_minirt *minirt);
void					test_ft_split_free(void *ptr));
char					**ft_split(const char *s, char c);
void					bench_ft_memcpy_medbench(void *ptr, void *vsptr));
void					ft_save_west_text(t_ray *ray, char *path);
int						ft_hit_moebius(t_object *o, t_ray *ray, t_interval t,
						t_hit *r);
void					test_ft_strdup_size(void *ptr));
void					ft_clean_board(char *array, int y, int n);
void					functioncollar(t_ray *ray, char *line);
void					ft_input_check(int ac, char **av, t_ray *ray);
t_sph					*return_sphere(t_minirt *minirt);
int						isnumber(char c));
void					free_list(t_list *list, void (*func)(void *));
t_color					color_add(t_color c1, t_color c2);
t_tri					*get_triangle(char *s, int p, t_minirt *minirt);
void					ft_cube_ijk(t_object *obj);
void					*ft_copy_conts(t_object *old, t_object *new);
double					vec3_pow(t_vec3 *v);
void					ft_2darray(void);
void					ft_set_filter(t_color *c, int filter);
t_squ					*get_square(char *s, int p, t_minirt *m);
void					test_ft_putendl_unicode(void *ptr));
int						parse_file(t_vec *vec, char *file);
char					*ft_dtoa(double n);
t_proj					*ft_proj_find(t_game *data, t_coord pos);
char					**ft_str2addn(char **orig, size_t add);
void					make_light_head(t_light_list **head);
void					test_ft_atof_zero(void *ptr));
int						mlx_pixel_put(t_xvar *xvar, t_win_list *win, int x,
						int y, int color);
int						ft_dig_str(char *str);
int						ft_literalquote(char *str);
void					bench_ft_strncmp_smallbench(void *ptr, void *vsptr));
void					test_ft_strmapi_null1(void *ptr));
int						ft_draw(t_ptr *p);
void					ft_echo(int argc, char **argv, t_list *env);
void					ft_sort_integer_table(int *tab, int size);
int						ft_get_data(t_ptr *p, int fd, int nbr0, int nbr1);
void					run_program(char **args, t_list *env);
int						mlx_loop(t_xvar *xvar);
int						ft_identifier_get(char *line, int *i);
void					test_ft_putstr_fd_ascii(void *ptr));
void					ft_list_foreach_if(t_list *begin_list,
						void (*f)(void *), void *data_ref, int (*cmp)(void *,
						void *)););
void					ft_levelorder_traversal(t_btree **node);
char					*ft_straddchar(char *str, char c);
int						ft_esc_single(char *str);
int						mlx_int_do_nothing(void *param);
void					ft_hud_fill(void);
void					comb_sort(int *order, double *dist, int amount);
unsigned int			convert_flr_clr(int r, int g, int b);
t_color					ft_get_checkerboard(t_object *o, t_hit *rec,
						t_noise *noise);
char					*get_cwd(void);
void					print_ptr(char **env);
void					flood_check(t_ray *ray, int x, int y);
int						ft_hit_torus(t_object *obj, t_ray *ray, t_interval t,
						t_hit *rrr);
int						mlx_int_param_undef();
char					*ft_strreplacec(char *org, char c, char *replace);
void					bench_ft_strncat_smallbench(void *ptr, void *vsptr));
t_list					*set_envvar(t_list **env, char *varname, char *value);
void					test_ft_putnbr_int_min(void *ptr));
int						ft_bmp_render(t_data *data);
int						ft_isascii(int c);
int						ft_identifier_parse(char *id);
t_list					*ft_list_at(t_list *begin_list, unsigned int nbr);
int						parse_tetrimino(t_vec *vec, int fd, char *line);
int						ft_esc_hex(char *str);
int						len_start(char *str);
int						color_map_2(unsigned char *data, int bpp, int sl,
						int w, int h, int endian, int type);
char					*mlx_int_static_line(char **xpm_data, int *pos,
						int size);
void					ft_lighting(t_scene *s, t_light *l, t_color *col);
char					ft_proj_direction(char playervis);
int						handle_release(int keycode, t_ray *ray);
int						ft_mlx_render(t_data *data);
t_vec3					apply_matrix(t_matrix43 matrix, t_vec);
void					ft_copy_arr(int *dst, int *src, int start, int len);
t_color					ft_voronoi_noise(t_vector p, t_color c_border,
						t_noise *noise);
int						ft_loop_plane(t_data *data, t_raydata *rdata,
						int raytype);
char					*ft_strnump_base(char *str, int *val, char *base,
						int limit);
void					ft_camera_cycle(t_data *data);
void					fre_array(char **array);
void					bench_ft_memcpy_smallbench(void *ptr, void *vsptr));
void					test_ft_strrchr_electric_memory(void *ptr));
int						mlx_string_put(t_xvar *xvar, t_win_list *win, int x,
						int y, int color, char *string);
int						ft_error_handling(int type);
void					ft_proj_draw(t_game *data, t_coord pos);
void					test_ft_strncmp_null1(void *ptr));
int						ft_mlx_keyup(int keycode, void *param);
int						ft_close(int keycode, t_minirt *minirt);
void					set_floor_ceiling(t_ray *ray);
void					ft_add_camera(t_ptr *p, int fd, char **line, int t);
t_list					*ft_make_link(char data);
int						mlx_int_xpm_set_pixel(t_img *img, char *data, int opp,
						int col, int x);
void					*mlx_png_file_to_image(void *xvar, char *file,
						int *width, int *height);
void					traverse_light_list(t_light_list **head);
void					test_ft_memmove_return(void *ptr));
t_cam					*return_cam(t_minirt *minirt, int index);
void					ft_memset(void *mem, size_t len, char c);
int 					enter_window(void);
t_sph					*get_sphere(char *s, int p, t_minirt *m);
int						ft_solver(char *output, char **field, int x, int y);
void					btree_insert_data(t_btree **root, void *item,
						int(*cmpf)(void *, void *));
void					*ft_calcul(t_thread *p);
int						ft_validate_strings(char *str);
int						ft_sqrt(int nb);
int						vec_destroy(t_vec *vector, void (*del)(void *));
void					ft_inorder_traversal(t_btree **node);
void					test_ft_memcmp_basic(void *ptr));
void					make_head(t_object_list **head);
void					bench_ft_strcpy_smallbench(void *ptr, void *vsptr));
void					test_ft_strcmp_ascii(void *ptr));
void					f_striteri(unsigned i, char *s));
int						ft_rush01(void);
void					calc_east_text(t_ray *ray);
t_vector				ft_rot_vec(t_vector a, t_vector b, double t);
t_color					ft_julia(double col, double row, t_noise *noise);
int						ft_strlen(char *s);
void					add_fun_subtest_(void (*fun)(void *ptr),
						char *funname));
void					ft_lstiter(t_list *lst, void (*f)(void *));
void					put_error(char *error);
int						ft_check_color(int min, int max, int clr);
int						get_b(int trgb);
void					test_ft_isprint_(void *ptr));
int						ft_link_len(t_list *begin_list);
int						mlx_int_str_str_cote(char *str, char *find, int len);
int						mlx_int_param_generic(t_xvar *xvar, );
t_list					*ft_lstlast(t_list *lst);
void					bench_ft_strnstr_medbench(void *ptr, void *vsptr));
void					bench_ft_strncpy_fatbench(void *ptr, void *vsptr));
int						ft_cray_triangle(t_trngl *tri, t_raydata *rdata);
int						mlx_int_anti_resize_win(t_xvar *xvar);
int						mlx_int_rgb_conversion(t_xvar *xvar);
int						mlx_do_sync(t_xvar *xvar);
void					ft_data_init(t_data *data);
void					handle_moving(t_ray *ray);
void					ft_tex_init(char **tex);
int						ft_twodimlen(char **twodim);
char					**saving_stdin(void);
void					ft_memdel(void **ap);
int						vec_add(t_vec *vector, void *buffer);
int						ft_rush_split(char **rush);
t_btree					*ft_partial_alphabet(t_btree  **start);
char					*gen_replacestr(char c);
t_btree					*ft_btree_create_node(void *item);
int						ft_delete_object(t_object **list,
						t_object **to_delete);
void					ft_postorder_traversal(t_btree **node);
void					ft_exit(char *str, ...));
void					add_light(t_light_list **head, t_light *light);
void					traverse_list(t_object_list **head);
void					ft_increase(void *data);
void					ft_position_update(t_data *data, t_vec incr,
						double speed);
t_list					*ft_list_push_params(int args, char **input);
void					ft_list_push_front(t_list **begin_list, void *data);
t_list					*ft_list_last(t_list *begin_list);
char					*path_new(t_mshell *mshell, char *value,
						bool update_env);
int						mlx_clear_window(t_xvar *xvar, t_win_list *win);
void					test_ft_strtrim_size(void *ptr));
int						ft_solved(char **field);
int						mlx_hook(t_win_list *win, int x_event, int x_mask,
						int (*funct)(), void *param);
void					ft_init_south(t_data *data, char *line, int i,
						int linenr);
void					ft_get_results(unsigned char result);
int						change_image(int keycode, t_minirt *minirt);
void					print_int_table(int *table, int size);
void					test_ft_memalloc_too_big(void *ptr));
size_t					ft_strlenc(char *str, char c);
void					cont_calc(t_ray *ray);
void					ft_adjustment(t_color *c);
t_object				*three_x_case(t_object *new, t_object *old);
char					*ft_strdup(const char *s1);
void					ft_modstrprint(char *str);
size_t					ft_strlens(char *str, char *set);
void					ms_set_procname_err(t_mshell *mshell, char *procname,
						char *err);
int						valid_spot(char **field, int x, int y, int number);
t_bitmap				*initialize_bitmap(int width, int heigth);
void					ft_list_clear(t_list **begin_list);
void					lstclear_f(void *lst, size_t s));
double					ft_tex_y_get(t_data *data, t_dda *dda, t_line line);
int						ft_recursive_power(int nb, int power);
int						ft_loop_triangle(t_data *data, t_raydata *rdata,
						int raytype);
void					ft_put2darray(int **array);
int						ft_tex_x_get(t_data *data, t_dda *dda, double dist);
void					ft_linetonoise(t_noise *noi, t_ptr *p, char **line,
						int free_it);
t_texdata				ft_texdata_get(t_data *data, t_dda *dda, double dist,
						t_line line);
void					bench_ft_strdup_medbench(void *ptr, void *vsptr));
char					ft_chrmatchs(char c, char *set);
void					ft_select_obj(t_ptr *p, int col, int row);
t_matrix43				lookat_matrix(t_vec3 from, t_vec3 to);
void					ft_sprite_arrayfill(t_data *data);
int						ft_cmp(void *data, void *ref);
void					test_ft_strncat_null1(void *ptr));
void					move_back(t_ray *ray);
bool					valid_file(char *str);
int						ft_texture_fd(t_data *data, char *line, int i,
						char **path);
int						ft_iseq(double c1, double c2);
void					ft_putnbr_hex(int hex);
void					test_ft_lstclear_free(void *ptr));
int						ft_mlx_update(t_data *data);
void					print_bits(unsigned char a);
void					ft_validate_data(t_data *data);
int						ft_validate_input(t_data *data, int argc,
						char **input);
void					ft_rot_ijk(t_r ft_r, double t, t_object *o);
t_object				*one_x_case(t_object *new, t_object *old);
void					test_ft_strtrim_empty(void *ptr));
int						mipng_is_type(unsigned char *ptr, char *type);
void					ft_print_spritedata(t_data *data);
int						ft_memcmp(const void *s1, const void *s2, size_t n);
double					ft_linetod(t_ptr *p, char **line, int free_it);
char					*ft_strlowcase(char *str);
int						load_env(t_table *env);
void					ft_writeline(int x, char left, char middle,
						char right);
void					test_ft_memalloc_malloc_null(void *ptr));
void					split_cmp_array(char ** expected, char ** got);
int						ft_red_x(t_ray *ray);
int						rush_xx(char current, char middle, char right,
						char left);
void					unset_envvar(t_list **env, char *varname);
t_vec					ft_cam_rot_y(t_vec pos, t_vec rot);
void					test_ft_atoi_rand(void *ptr));
int						mlx_loop_hook(t_xvar *xvar, int (*funct)(),
						void *param);
void					ft_putnbr(int n);
void					ft_btree_insert_inorder(t_btree **start, int *table,
						int index);
int						flood_fill_map(t_ray *ray, int x, int y);
int						rush02(void);
void					test_ft_strnstr_found(void *ptr));
void					test_ft_strtrimc_null(void *ptr));
int						mlx_key_hook(t_win_list *win, int (*funct)(),
						void *param);
void					ft_strdel(char **as);
void					test_ft_strlcat_return_value(void *ptr));
void					ft_sprite_array(t_data *data);
void					test_ft_memchr_speed(void *ptr));
int						ft_rush_mid(char prevprev, char prev, char *rush,
						int result);
int						ft_hit_cube(t_object *o, t_ray *r, t_interval t,
						t_hit *rec);
unsigned int			ft_put_text_south(t_ray *ray, unsigned int color,
						int y);
void					test_ft_strcpy_zero(void *ptr));
t_vec					ft_sphere_normal(t_sphere *sphere, t_vec r_coll);
void					save_floor(t_ray *ray, char **value);
void					test_ft_strstr_basic4(void *ptr));
int						mlx_int_get_good_color(t_xvar *xvar, int color);
size_t					count_unescapedchr(char *str, char c);
void					bench_ft_strrchr_smallbench(void *ptr, void *vsptr));
int						ft_validate_range(int min, int max, int nb);
void					add_fun_subbench_(void (*fun)(void *ptr1, void *ptr2),
						char *funname));
void					write_file_header(int fd,
						t_bmp_file_header *file_header);
int						ft_side_set(int nb, int opt1, int opt2);
int						ft_isspace(int chr);
void					test_ft_memcpy_electric_memory(void *ptr));
void					ft_init_copy_obj(t_object *new, t_object *old);
void					global_ctor(void);
char					*ft_strtok_r(char *str, const char *delim,
						char **save_ptr);
int						mlx_int_deal_shm(t_xvar *xvar);
void					ft_menu_bar(t_ptr *p);
char					**ft_make_board(void);
void					bench_ft_strcmp_medbench(void *ptr, void *vsptr));
char					*ft_strtokplus(char *input, char *delim);
void					list_printer(t_list *list);
void					test_ft_memalloc_size(void *ptr));
char					*ft_strcpy(char *dst, const char *src);
int						rush_line(char prev, char middle, char left,
						char right);
void					test_ft_lstadd_back(void);
void					ft_striter(char *s, void (*f)(char *));
int						ft_recursive_sqrt(int nb);
void					move_buffer(char *buffer, int bytes_read);
void					ft_which_rush(unsigned char result, int i);
int						func_call_two(t_ray *ray, char **info, char *line,
						int die);
t_color					apply_light(t_hit *hit, t_light *light,
						double diffuse);
void					ft_move_triangle(t_object *o);
int						ft_rush00(void);
t_list					*ft_lstnew(void *content);
void					test_ft_strndup_zero(void *ptr));
void					ft_crossout_diag(int *squares, int cur_square,
						int player, int end);
int						mlx_destroy_window(t_xvar *xvar, t_win_list *win);
t_list					*ft_lstmap(t_list *lst, void *(*f)(void *),
						void (*del)(void *));
int						ft_rush_top_filtering(char prevprev, char current,
						char *rush, int result);
void					test_ft_calloc_free(void *ptr));
char					*ft_strncpy(char *dst, const char *src, size_t len);
void					bench_ft_bzero_fatbench(void *ptr, void *vsptr));
char					*first_line(char current, int i);
int						ft_sum(int mass);
int						ft_ascend_cmp(void *data1, void *data2);
int						rush_split(void);
void					test_ft_strcpy_basic(void *ptr));
void					ft_put2dstr(char **str);
void					ft_preorder_traversal(t_btree **node);
void					test_ft_atof_inf_plus(void *ptr));
void					ft_putstr(char *str);
int						print_cwd(void);
void					test_ft_memccpy_basic_test(void *ptr));
void					ft_print_combn(int n);
char					*ft_strncat(char *s1, const char *s2, size_t n);
int						ft_compare_result(char *final, char *rush,
						unsigned char result);
int						print_mouse(int x, int y, t_var *var);
int						ft_str_is_numeric(char *str);
void					test_ft_lstadd_front_basic(void *ptr));
void					ft_number_assign(char *numbers, int n);
void					test_ft_strcat_empty2(void *ptr));
int						ft_countword(const char *str, char c);
void					test_ft_strlcpy_overflow(void *ptr));
void					philosopher_write(t_philo *phil, const char *s);
void					ft_increment(char *numbers, int n, int i);
void					bench_ft_memmove_smallbench(void *ptr, void *vsptr));
t_list					*ft_list_find(t_list *begin_list, void *data_ref,
						int (*cmp)(void *, void *));
void					ft_print_alphabet(void);
void					test_ft_strncmp_speed(void *ptr));
char					*ft_convert_base(char *nbr_a, char *base_from_a,
						char *base_to_a);
int						word_count(char *str, char *charset);
void					ft_perlin_init(t_perlin *plin);
void					ft_data_mlx_init(t_data *data);
void					ft_div_mod(int a, int b, int *div, int *mod);
int						ft_solve_quadric(double c[3], double s[2]);
t_vector				ft_pro(t_vector a, t_vector b);
void					ft_swap_integers(int *tab, int num1, int num2);
t_color					ft_pro_kc(t_color a, double k);
void					ft_print_integer_table(int *table, int size);
void					test_ft_strncat_basic(void *ptr));
void					*mlx_int_parse_xpm(t_xvar *xvar, void *info,
						int info_size, char *(*f)());
char					*ft_strnew(size_t size);
int						ft_find_possibility(int *squares, int player,
						t_board board, int *temp_board);
void					ft_ultimate_ft(int *********nbr);
void					ft_linelimit(int i, int j, int k);
void					ft_init_sprite(t_data *data, char *line, int i,
						int linenr);
void					ft_fill_board(int *squares, char fill1, char fill2);
void					test_ft_strjoin_basic(void *ptr));
void					test_ft_itoa_malloc_null(void *ptr));
void					test_ft_lstadd_back_null(void *ptr));
int						ft_third_split(char *final, char **rushes);
int						ft_user_input_filter(int args, char **input);
void					test_ft_memccpy_not_found(void *ptr));
double					ft_atod(char *s, t_minirt *m, int mod);
void					ft_map_del(char **map);
char					*ft_substr(char const *s, unsigned int start,
						size_t len);
int						strlen_tests(void);
void					ft_crossout_vert(int *squares, int cur_square,
						int player, int end);
t_color					ft_get_fractal(t_object *o, t_hit *rec,
						t_noise *noise);
void					ft_putarray(char *array, int n);
void					test_ft_memset_zero_value(void *ptr));
int						ft_is_valid(char *board, int x, int y, int n);
void					ms_perror(t_mshell *mshell);
void					test_ft_memccpy_speed(void *ptr));
void					ft_putendl_fd(char *s, int fd);
int						ft_eight_queens(int n);
void					ft_crossout(char *squares, int cur_square,
						int increment, int end);
int						ft_check_conflict(int *squares, int cur_square,
						int end);
int						ft_hit_sphere(t_object *o, t_ray *r, t_interval t,
						t_hit *rrr);
int						ft_ultimate_range(int **range, int min, int max);
void					ft_reader_init(t_reader *reader);
t_vector				ft_vector(double x, double y, double z);
void					test_ft_putstr_fd_unicode(void *ptr));
void					test_ft_strcat_speed(void *ptr));
char					*ft_strtrim(const char *s1, char const *set);
t_cam					*get_camera(char *s, int p, t_minirt *m);
void					check_triangle(char *s, int p, t_minirt *m);
void					test_ft_atoi_max_int(void *ptr));
void					ft_putstrfd(int fd, char *str);
int						find_possibility(t_board stats, int *board,
						int player);
void					*electric_alloc_rev(size_t size);
void					test_ft_strmapi_malloc_size(void *ptr));
void					ft_sprite_drawy(t_data *data, t_spriterender *render,
						int x);
int						check_prime(int nb);
void					sighandler(int signal);
int						ft_is_prime(int nb);
void					test_ft_strdel_null(void *ptr));
double					ft_clamping(double value);
int						ft_second_column(char *str, int i, int size);
int						render_frame(t_ray *ray);
void					*ft_print_memory(void *addr, unsigned int size);
char					*ft_strupcase(char *str);
void					ft_string_swap(char **str1, char **str2);
void					ft_sprite_drawx(t_data *data, t_spriterender *render,
						int spritescreen_x);
char					*ft_concat_params(int argc, char **argv);
int						read_tests(void);
int						int_length(int nbr, int base);
void					bench_ft_memcpy_fatbench(void *ptr, void *vsptr));
void					start_text_img(t_ray *ray);
char					**ft_split_whitespaces(char *str);
void					test_ft_strcat_overflow(void *ptr));
t_object				*four_x_case(t_object *new, t_object *old);
int						ft_cray_plane(t_plane *pln, t_raydata *rdata);
int						ft_even(int nbr);
void					ft_init_north(t_data *data, char *line, int i,
						int linenr);
void					bench_ft_strlcat_fatbench(void *ptr, void *vsptr));
void					*ft_loading(t_load *t);
void					join_threads(pthread_t *threads, t_data *data);
void					ft_starting(t_ptr *p, int longg);
void					ft_mlx_putpixel(t_ptr *p, int x, int y, int color);
void					test_ft_putchar_unicode(void *ptr));
t_color					ft_get_mamamiya(t_object *o, t_hit *rec,
						t_noise *noise);
void					ft_do_rot(t_ptr *p, t_vector *ret, char **each);
t_vector				ft_linetorot(t_ptr *p, char **line, int free_it);
void					test_ft_atof(void));
int						ft_toupper(int c);
double					ft_deg2rad(double angle);
t_vector				ft_linetovec(t_ptr *p, char **line, int free_it);
void					ft_lstadd_back(t_list **alst, t_list *new);
void					ft_lstadd_front(t_list **alst, t_list *new);
void					ft_linetocoef(t_object *o, t_ptr *p, char **line,
						int free_it);
void					test_ft_lstnew_malloc_null(void *ptr));
t_color					ft_linetocol(t_ptr *p, char **line, int free_it);
void					test_ft_lstsize(void);
void					ft_linetotxt(t_texture *txt, t_ptr *p, char **line,
						int free_it);
void					test_ft_itoa_free_int_min(void *ptr));
float					ft_acc(t_vector c[2][2][2], t_vector v, float acc);
void					test_ft_calloc_too_big(void *ptr));
t_vec3					setcam(t_vec3 from, t_vec3 to, t_vec3 norm_vec);
float					ft_perlin_noise(t_perlin *p, t_vector v, int depth);
void					test_ft_lstlast(void);
void					test_ft_putchar_fd_basic(void *ptr));
void					ft_plane_mapping(t_hit *rec, t_object *o);
void					ft_free_conts(t_object **object);
void					ft_free_objects(t_object **object, void *mlx, int end);
void					test_ft_strjoin_null2(void *ptr));
t_light					*ft_copy_lights(t_light *old);
t_object				*ft_copy_objects(t_object *old);
t_ptr					*ft_copy_ptr(t_ptr *old);
t_object				*ft_set_val(t_object *old, t_object *new);
t_object				*zero_x_case(t_object *new, t_object *old);
float					ft_rand1dto1d(float value, float mutator);
float					ft_rand3dto1d(t_vector value, t_vector dot_dir);
t_vector				ft_rand3dto3d(t_vector value);
t_vector				ft_ray_function(t_ray *r, double t);
t_ray					ft_get_ray(t_camera *p, double u, double v);
t_vector				ft_rotcam_x(t_vector old, double theta);
void					*destroy_malloc(size_t i);
void					test_ft_memmove_electric_memory(void *ptr));
void					ft_print_proj(t_proj *projectile);
void					check_sphere(char *s, int p, t_minirt *m);
void					ft_save_video(t_ptr *p);
void					test_ft_memset_electric_memory(void *ptr));
void					ft_hud_print(t_player data);
void					bench_ft_strstr_medbench(void *ptr, void *vsptr));
t_color					specular(t_scene *s, t_light *l);
void					test_ft_strdup_speed(void *ptr));
t_light					*get_light(char *s, int p, t_minirt *m);
t_color					ft_get_texture(t_texture *t, double *u, double *v);
void					test_ft_strcpy_null2(void *ptr));
size_t					ft_strclen(char *str, char c);
void					start_text_sprite(t_ray *ray);
int						ft_bg_col(int bg, int x, int y);
char					*ft_ctoa(t_color c);
void					ft_display_properties(t_ptr *p);
void					test_ft_memccpy_stop_char_unsigned(void *ptr));
t_vector				ft_coltovec(t_color c);
int						color_map_1(void *win, int w, int h);
t_color					ft_vectocol(t_vector v);
void					test_ft_atof_blanks1(void *ptr));
t_vector				ft_add(t_vector a, t_vector b);
t_vector				ft_sub(t_vector a, t_vector b);
t_vector				ft_div(t_vector a, t_vector b);
void					ft_sig_failed(int s));
void					test_ft_strncpy_fill(void *ptr));
t_vector				ft_normalize(t_vector a);
t_vector				ft_rot_z(t_vector old, double theta);
t_vector				ft_pro_k(t_vector a, double k);
int						ft_hit_hyperboloid(t_object *o, t_ray *ray,
						t_interval t, t_hit *r);
int						mouse_win1(int button, int x, int y, void *p);
int						ft_mouse_press(int button, int x, int y, t_ptr *p);
t_vector				ft_div_k(t_vector a, double k);
int						mlx_put_image_to_window(t_xvar *xvar, t_win_list *win,
						t_img *img, int x, int y);
double					ft_dot(t_vector a, t_vector b);
void					get_text_color(t_ray *ray, int y);
void					check_arg(char *arg, int p, t_minirt *minirt);
void					ft_plane_ijk(t_object *obj);
void					bench_ft_memset_fatbench(void *ptr, void *vsptr));
void					test_ft_strchr_basic(void *ptr));
void					ft_putnbr_interpreted(int nbr, int base);
void					ft_triangle_ijk(t_object *obj);
void					test_ft_lstmap_null(void *ptr));
void					img_to_window(t_ray *ray);
void					ft_cylinder_ijk(t_object *obj);
void					test_ft_strstr_basic(void *ptr));
void					ft_vects_1(t_object *o);
void					ft_vects_2(t_object *o);
void					test_ft_lstclear_number(void *ptr));
void					test_ft_split_zero(void *ptr));
void					ft_fin(t_object *o);
void					test_ft_strlcpy_return(void *ptr));
void					test_ft_memmove_double_null2(void *ptr));
t_color					ft_lerp(t_color a, t_color b, float f);
float					ft_step(float a, float x);
void					test_ft_isascii_(void *ptr));
int						empty_gnl(int fd);
int						check_death(t_philo *phil);
void					*ft_map_free(char **map);
void					print_array(int *array, int size);
void					test_ft_strncpy_empty(void *ptr));
int						add_index(int *indices, int index, int *nums, int num);
int						strdup_tests(void);
int						one_write_test(const char *str);
void					test_ft_strrchr_empty(void *ptr));
void					test_ft_putchar_fd_ascii(void *ptr));
int						hardcore_main(void *libft_so_handler);
void					write_borders(void);
void					test_ft_atoi_over_max_long(void *ptr));
int						mipng_verif_hdr(unsigned char *hdr, png_info_t *pi);
void					ft_init_pcube(t_object *o, t_ray *ray, double c[5]);
void					test_ft_strjoin_free(void *ptr));
void					write_result(char *fun, bool succeed);
void					bench_ft_memset_smallbench(void *ptr, void *vsptr));
void					test_ft_strcmp_unsigned(void *ptr));
void					bench_ft_bzero_medbench(void *ptr, void *vsptr));
int						rgbt(int t, int r, int g, int b);
void					bench_ft_bzero_smallbench(void *ptr, void *vsptr));
void					ncurses_deinit(void);
void					bench_ft_memccpy_fatbench(void *ptr, void *vsptr));
t_hit					intersect_plane(t_ray *ray, t_pla *plane);
void					test_ft_strmapi_null2(void *ptr));
void					bench_ft_memccpy_medbench(void *ptr, void *vsptr));
void					bench_ft_memccpy_smallbench(void *ptr, void *vsptr));
void					test_ft_strstr_electric_memory(void *ptr));
void					bench_ft_memmove_fatbench(void *ptr, void *vsptr));
void					test_ft_strcat_null1(void *ptr));
void					bench_ft_memchr_fatbench(void *ptr, void *vsptr));
void					test_ft_memmove_null2(void *ptr));
int						wall_col(t_ray *ray, int x, int y, char dir);
void					test_ft_strmapi_zero(void *ptr));
void					bench_ft_memchr_medbench(void *ptr, void *vsptr));
void					bench_ft_memcmp_fatbench(void *ptr, void *vsptr));
void					bench_ft_memcmp_smallbench(void *ptr, void *vsptr));
void					bench_ft_strlen_fatbench(void *ptr, void *vsptr));
int						ft_2dstrlen(char **str);
void					bench_ft_strlen_medbench(void *ptr, void *vsptr));
void					test_ft_strtrimc_malloc_null(void *ptr));
char					*get_abs_path(t_list *env, char *program);
void					bench_ft_strncpy_medbench(void *ptr, void *vsptr));
int						mlx_int_str_str(char *str, char *find, int len);
char					**ft_map_init(void);
void					bench_ft_strcat_fatbench(void *ptr, void *vsptr));
void					test_ft_atoi_min_long(void *ptr));
void					retrieve_sphere(voi);
int						ft_splitter(char *buff);
void					bench_ft_strcat_medbench(void *ptr, void *vsptr));
void					bench_ft_strcat_smallbench(void *ptr, void *vsptr));
void					bench_ft_strlcat_medbench(void *ptr, void *vsptr));
void					bench_ft_strchr_fatbench(void *ptr, void *vsptr));
void					ncurses_init(void);
void					test_ft_putchar_fd_unicode(void *ptr));
void					bench_ft_strchr_medbench(void *ptr, void *vsptr));
void					bench_ft_strrchr_fatbench(void *ptr, void *vsptr));
void					bench_ft_strstr_fatbench(void *ptr, void *vsptr));
t_hit					intersect_sphere(t_ray *ray, t_sph *sphere);
void					test_ft_bzero_null(void *ptr));
void					print_result(int res);
int						get_g(int trgb);
void					bench_ft_strstr_smallbench(void *ptr, void *vsptr));
void					test_ft_atoi_min_int(void *ptr));
void					test_ft_lstadd_back_basic(void *ptr));
void					bench_ft_strnstr_fatbench(void *ptr, void *vsptr));
void					bench_ft_strcmp_fatbench(void *ptr, void *vsptr));
void					bench_ft_strncmp_medbench(void *ptr, void *vsptr));
bool					single_bracket_on_line(char *line, int n);
char					*get_next_code_line(char **code, bool reset);
t_tile					*ft_tile_new(t_coord pos, char visual);
void					*electric_alloc(size_t size);
unsigned long long		ft_clock(void));
void					test_ft_strlcat_null2(void *ptr));
char					*get_fd_buffer(int fd, char *buff, size_t size));
_Bool					str_find_array(char **array, char *str);
void					load_test(char **function_list));
void					load_bench(char **function_list);
void					ft_put_ul_fd(unsigned long n, int fd);
void					*ft_memchr(const void *s, int c, size_t n);
void					ft_linetosize(t_object *o, t_ptr *p, char **line,
						int free_it);
void					run_subbench(void *h, void *h2);
char					**get_options(char **av);
void					ft_putnbr_base(int nbr, char *base);
void					test_ft_memchr_null(void *ptr));
void					test_ft_strdup_last_char(void *ptr));
void					ft_atod_check(char *s, t_minirt *m, int mod);
void					sandbox_sig_int(int s));
int						vec_get(t_vec *vector, void *buffer, size_t index);
void					ft_sig_success(int s));
void					ft_selected_event(int key, t_ptr *p);
void					ft_sig_missing(int s));
void					bench_ft_memchr_smallbench(void *ptr, void *vsptr));
void					ft_sig_crash(int s));
void					ft_sig_timeout(int s));
void					test_ft_strtrimc_free(void *ptr));
void					test_ft_memset_basic(void *ptr));
int						strcmp_tests(void);
void					test_ft_memset_return(void *ptr));
void					test_ft_strdup_zero(void *ptr));
void					test_ft_memset_fat(void *ptr));
void					test_ft_memset_null(void *ptr));
void					bench_ft_strncat_medbench(void *ptr, void *vsptr));
void					test_ft_memset_speed(void *ptr));
void					test_ft_bzero_basic(void *ptr));
void					test_ft_memmove_speed(void *ptr));
void					test_ft_bzero_zero_value(void *ptr));
void					ft_bzero(void *s, size_t n);
void					test_ft_bzero_electric_memory(void *ptr));
void					test_ft_memcpy_zero_value(void *ptr));
void					test_ft_memcpy_basic_test2(void *ptr));
void					test_ft_putchar_ascii(void *ptr));
void					ft_print_player(t_player *player);
void					test_ft_memcpy_to_small(void *ptr));
void					ms_free(t_mshell *mshell);
void					ft_map_update(t_game *data);
void					test_ft_memcpy_struct(void *ptr));
void					test_ft_split_end(void *ptr));
void					test_ft_memcpy_null2(void *ptr));
void					test_ft_memcpy_double_null1(void *ptr));
void					test_ft_memcpy_double_null2(void *ptr));
void					test_ft_memccpy_memory_unsigned(void *ptr));
void					test_ft_memccpy_zero_value(void *ptr));
t_initf					ft_init_funct(int id);
void					test_ft_memccpy_basic_test2(void *ptr));
int						ft_print_error(int error);
void					test_ft_memccpy_struct(void *ptr));
void					test_ft_memccpy_electric_memory(void *ptr));
t_vector				ft_rot_x(t_vector old, double theta);
void					test_ft_substr_size(void *ptr));
void					test_ft_memccpy_null2(void *ptr));
void					test_ft_memmove_basic(void *ptr));
void					test_ft_memmove_long_int(void *ptr));
void					test_ft_strchr_before_0(void *ptr));
void					ft_create_image(t_ptr *p);
void					test_ft_putnbr_basic(void *ptr));
void					test_ft_memmove_overlap(void *ptr));
void					test_ft_memmove_null1(void *ptr));
void					test_ft_memmove_double_null1(void *ptr));
void					bench_ft_strdup_fatbench(void *ptr, void *vsptr));
void					test_ft_strnstr_null2(void *ptr));
int						expose_win1(void *p);
void					test_ft_putendl_fd_ascii(void *ptr));
void					test_ft_memmove_same_pointer(void *ptr));
void					ft_list_push_back(t_list **begin_list, void *data);
void					test_ft_memchr_basic(void *ptr));
int						ft_coord_restrain(t_coord *pos);
void					test_ft_memchr_not_found1(void *ptr));
void					test_ft_memchr_not_found2(void *ptr));
void					test_ft_memcmp_basic1(void *ptr));
void					test_ft_substr_all(void *ptr));
void					test_ft_strstr_basic5(void *ptr));
void					rush(int x, int y);
void					test_ft_memcmp_basic2(void *ptr));
void					test_ft_strrchr_basic1(void *ptr));
void					test_ft_memcmp_basic3(void *ptr));
void					test_ft_strcpy_overflow(void *ptr));
int						mlx_int_set_win_event_mask(t_xvar *xvar);
void					test_ft_memcmp_hidden(void *ptr));
void					ft_proj_addbck(t_game *data, t_proj *new);
char					*ft_strmap(char const *s, char (*f)(char));
void					test_ft_memcmp_null1(void *ptr));
void					test_ft_memccpy_return(void *ptr));
void					test_ft_strncpy_null2(void *ptr));
void					test_ft_memcmp_null2(void *ptr));
t_ray					ft_ray_direction(t_data *data, int x);
void					test_ft_memcmp_speed(void *ptr));
void					test_ft_strlen_basic(void *ptr));
void					handle_strafe(t_ray *ray);
void					test_ft_strlen_random(void *ptr));
void					test_ft_strlen_bad_opti(void *ptr));
void					load_timer(void));
void					test_ft_strlen_unicode(void *ptr));
char					comparison(char *str, char *charset, int index);
void					test_ft_strlen_empty(void *ptr));
char					*ft_strreplace(char *org, char *before, char *after);
float					ft_noise(t_perlin *p, t_vector v);
void					test_ft_strlen_null(void *ptr));
void					test_ft_strlen_electric_memory(void *ptr));
void					test_ft_strncpy_null1(void *ptr));
void					test_ft_strlen_little(void *ptr));
void					sprite_calc(t_ray *ray, int sprite_order[], int i);
void					test_ft_strdup_basic(void *ptr));
void					printmem(char *str);
void					test_ft_calloc_malloc_null(void *ptr));
void					ft_init_map(t_data *data, char *line, int i,
						int linenr);
void					test_ft_calloc_zero(void *ptr));
void					test_ft_calloc_basic(void *ptr));
int						ft_fibonacci(int index);
void					test_ft_calloc_size(void *ptr));
void					test_ft_memdel_free(void *ptr));
void					test_ft_strcpy_unicode(void *ptr));
void					test_ft_strcpy_electric_memory(void *ptr));
double					ft_abs(double n);
void					test_ft_strncpy_number_0(void *ptr));
void					test_ft_strcpy_null1(void *ptr));
void					bench_ft_strdup_smallbench(void *ptr, void *vsptr));
void					test_ft_strncpy_basic(void *ptr));
void					test_ft_strncpy_return(void *ptr));
void					test_ft_putchar_basic(void *ptr));
void					test_ft_strlcat_null_byte(void *ptr));
void					test_ft_strncpy_unicode(void *ptr));
void					test_ft_strncpy_zero(void *ptr));
void					test_ft_strncpy_speed(void *ptr));
void					test_ft_strcat_return(void *ptr));
void					test_ft_strcat_unicode(void *ptr));
void					free_this(char **array);
void					test_ft_strcat_empty1(void *ptr));
void					test_ft_strncat_return(void *ptr));
void					test_ft_strncat_basic1(void *ptr));
void					test_ft_strncat_empty1(void *ptr));
void					test_ft_strncat_null_byte(void *ptr));
t_color					ft_add_kc(t_color a, double k);
void					test_ft_strncat_electric_memory(void *ptr));
void					test_ft_lstnew(void);
void					test_ft_strncat_null2(void *ptr));
void					test_ft_strtrimc_size(void *ptr));
void					test_ft_strncat_speed(void *ptr));
void					test_ft_strlcat_basic(void *ptr));
void					test_ft_strlcat_basic1(void *ptr));
void					test_ft_strlcat_size(void *ptr));
void					test_ft_strlcat_empty2(void *ptr));
void					test_ft_strchr_empty(void *ptr));
void					test_ft_strlcat_null1(void *ptr));
void					test_ft_strnequ_same_pointer(void *ptr));
void					test_ft_strlcat_speed(void *ptr));
void					test_ft_strchr_first(void *ptr));
void					test_ft_striter_basic(void *ptr));
t_btree					*ft_sorted_numbers(t_btree  **start);
void					test_ft_strchr_not_found(void *ptr));
void					test_ft_strclr_null(void *ptr));
void					ft_striteri(char *s, void (*f)(unsigned int, char *));
void					test_ft_strchr_unicode(void *ptr));
void					test_ft_strchr_after_0(void *ptr));
void					test_ft_strchr_zero(void *ptr));
void					test_ft_strchr_electric_memory(void *ptr));
void					ft_swap_i(int *a, int *b);
void					test_ft_strchr_speed(void *ptr));
void					test_ft_strrchr_not_found(void *ptr));
void					test_ft_strrchr_null(void *ptr));
void					test_ft_strstr_basic3(void *ptr));
void					test_ft_strstr_unicode(void *ptr));
void					test_ft_strstr_zero_len(void *ptr));
void					test_ft_strstr_not_found(void *ptr));
void					test_ft_strstr_null1(void *ptr));
void					test_ft_memdel_null(void *ptr));
void					test_ft_strmap_null2(void *ptr));
t_tile					*ft_tile_find(t_tile **root, t_coord tofind);
void					test_ft_strstr_null2(void *ptr));
void					test_ft_strnstr_basic(void *ptr));
void					test_ft_strnstr_basic2(void *ptr));
void					test_ft_strnstr_zero_len1(void *ptr));
void					test_ft_putnbr_int_max(void *ptr));
void					test_ft_strnstr_zero_len3(void *ptr));
int						ft_strnequ(char const *s1, char const *s2, size_t n);
void					test_ft_substr_null(void *ptr));
void					*philosopher_death(t_philo *phil);
void					test_ft_strnstr_electric_memory(void *ptr));
int						trim_help(char *line);
void					ft_validate_color_entry(t_data *data, char *line,
						char *errstr);
void					test_ft_strnstr_speed(void *ptr));
int						write_bitmap_to_file(t_bitmap *bmp, t_minirt *minirt,
						char *img_addr);
void					test_ft_strcmp_basic1(void *ptr));
int						orf_test2(void);
t_size					ft_strsetcount(const char *str, const char *set);
void					test_ft_strcmp_basic3(void *ptr));
void					test_ft_strcmp_basic4(void *ptr));
void					test_ft_strcmp_null1(void *ptr));
void					test_ft_strcmp_zero1(void *ptr));
void					test_ft_strcmp_zero2(void *ptr));
void					bench_ft_memset_medbench(void *ptr, void *vsptr));
void					test_ft_strcmp_electric_memory(void *ptr));
void					test_ft_atoi_string(void *ptr));
void					test_ft_strndup_malloc_null(void *ptr));
void					test_ft_strncmp_basic2(void *ptr));
void					ft_drawdata_get(t_data *data, t_spriterender *render,
						int spritescreen_x);
void					test_ft_strncmp_basic3(void *ptr));
void					test_ft_strncmp_basic4(void *ptr));
void					test_ft_lstnew_null(void *ptr));
void					test_ft_strnstr_basic4(void *ptr));
void					test_ft_memccpy_null1(void *ptr));
void					test_ft_strncmp_over_len(void *ptr));
void					test_ft_strncmp_hidden(void *ptr));
void					calc_north_text(t_ray *ray);
void					test_ft_strncmp_ascii(void *ptr));
void					test_ft_strncmp_electric_memory(void *ptr));
double					ft_lengthsquared(t_vector a);
void					test_ft_atoi_blank1(void *ptr));
void					test_ft_strclr_basic(void *ptr));
void					test_ft_atoi_blank2(void *ptr));
void					test_ft_strequ_basic2(void *ptr));
void					test_ft_atoi_invisible(void *ptr));
void					test_ft_atoi_over_min_long(void *ptr));
int						ft_print_rushes(int decrement, char rush);
void					test_ft_atoi_speed(void *ptr));
void					test_ft_strmap_malloc_null(void *ptr));
void					test_ft_isalpha_(void *ptr));
void					test_ft_isdigit_(void *ptr));
void					test_ft_toupper_(void *ptr));
void					test_ft_tolower_(void *ptr));
int						ft_strlen_n(char *str);
void					test_ft_memalloc_free(void *ptr));
int						setup_threads(t_data *data);
void					test_ft_memalloc_zero(void *ptr));
void					test_ft_memalloc_malloc_size(void *ptr));
double					ft_frac(double value);
void					test_ft_memdel_test(void *ptr));
int						mlx_flush_event(t_xvar *xvar);
void					test_ft_strnew_malloc_null(void *ptr));
void					test_ft_strnstr_same_ptr(void *ptr));
void					test_ft_strdel_free(void *ptr));
char					ft_delim(char *token, char *arg_end);
void					f_striter(char *s));
void					test_ft_striter_electric_memory(void *ptr));
void					test_ft_striter_null1(void *ptr));
t_color					ft_add_c(t_color a, t_color b);
void					test_ft_striter_null2(void *ptr));
void					test_ft_putendl_ascii(void *ptr));
char					f_strmap(char c));
void					test_ft_strmap_basic(void *ptr));
t_proj					*ft_proj_new(t_game *data);
size_t					ft_strclenb(char *str, char c);
void					test_ft_strmap_size(void *ptr));
void					test_ft_lstlast_basic(void *ptr));
char					f_strmapi(unsigned i, char c));
void					test_ft_strncpy_electric_memory(void *ptr));
void					test_ft_strmapi_basic(void *ptr));
void					test_ft_putstr_fd_basic(void *ptr));
void					test_ft_strequ_basic(void *ptr));
int						*ft_range(int min, int max);
t_vec					ft_cam_rot_x(t_vec pos, t_vec rot);
void					test_ft_strequ_null2(void *ptr));
void					test_ft_strnequ_basic(void *ptr));
void					test_ft_atof_exp1(void *ptr));
void					test_ft_striteri_electric_memory(void *ptr));
void					test_ft_strnequ_electric_memory(void *ptr));
void					test_ft_strnequ_null1(void *ptr));
void					test_ft_strnequ_null2(void *ptr));
void					test_ft_substr_basic(void *ptr));
t_color					apply_light_tri(t_hit *hit, t_light *light);
void					test_ft_substr_zero_len(void *ptr));
void					test_ft_substr_zero(void *ptr));
void					test_ft_substr_electric_memory(void *ptr));
void					test_ft_strjoin_overlap(void *ptr));
void					test_ft_strlcpy_null(void *ptr));
void					test_ft_strjoin_malloc_null(void *ptr));
void					test_ft_strjoin_zero(void *ptr));
void					test_ft_strjoin_null1(void *ptr));
void					ft_object_selected(t_ptr *p);
void					test_ft_strtrim_basic(void *ptr));
void					ft_list_merge(t_list **begin_list1,
						t_list *begin_list2);
void					test_ft_strtrim_basic3(void *ptr));
void					test_ft_strtrim_blank(void *ptr));
t_list					*find_next(t_list *begin_list, int len);
void					test_ft_strtrim_free(void *ptr));
void					test_ft_strtrim_zero(void *ptr));
int						mlx_do_key_autorepeaton(t_xvar *xvar);
void					test_ft_putnbr_fd_itoa(void *ptr));
void					test_ft_strtrim_null(void *ptr));
int						ft_eight_queens_puzzle(t_board board);
void					test_ft_split_begin(void *ptr));
int						key_win3(int key, void *p);
void					test_ft_split_empty(void *ptr));
void					test_ft_split_full(void *ptr));
float					ft_smoothstep(float a, float b, float x);
void					test_ft_split_malloc_null(void *ptr));
void					test_ft_split_null(void *ptr));
void					test_ft_itoa_basic(void *ptr));
void					test_ft_itoa_random(void *ptr));
void					test_ft_itoa_min_int(void *ptr));
void					test_ft_itoa_zero_byte(void *ptr));
void					test_ft_putstr_ascii(void *ptr));
void					test_ft_putstr_unicode(void *ptr));
void					test_ft_putstr_null(void *ptr));
void					test_ft_putendl_basic(void *ptr));
void					test_ft_putendl_null(void *ptr));
void					test_ft_putnbr_itoa(void *ptr));
void					*mr_manager(void *param);
void					test_ft_split_basic(void *ptr));
void					test_ft_putnbr_random(void *ptr));
void					test_ft_putstr_fd_null(void *ptr));
void					test_ft_putendl_fd_unicode(void *ptr));
void					test_ft_strnew_size(void *ptr));
void					test_ft_putnbr_fd_basic(void *ptr));
void					test_ft_putnbr_fd_int_max(void *ptr));
void					test_ft_strequ_null1(void *ptr));
void					test_ft_putnbr_fd_int_min(void *ptr));
void					test_ft_putnbr_fd_random(void *ptr));
void					test_ft_lstnew_basic(void *ptr));
t_list					*lstnew(void *d));
char					*ft_map_add(t_data *data, char *line, int linenr);
void					ft_tile_draw(t_game *data);
void					test_ft_isblank_(void *ptr));
void					test_ft_memchr_null_byte(void *ptr));
void					test_ft_lstdelone_basic(void *ptr));
void					test_ft_lstclear_basic(void *ptr));
void					test_ft_lstclear(void));
void					test_ft_lstadd_front(void);
void					test_ft_memcmp_unsigned(void *ptr));
void					test_ft_lstadd_back_free(void *ptr));
void					test_ft_lstsize_basic(void *ptr));
void					lstiter_f(void *content));
void					test_ft_striteri_basic(void *ptr));
void					test_ft_lstiter_basic(void *ptr));
void					test_ft_lstiter_null(void *ptr));
void					test_ft_lstiter(void);
void					write_box(void);
void *					lstmap_f(void *content));
void					test_ft_lstmap_basic(void *ptr));
void					test_ft_islower_(void *ptr));
size_t					ft_strskipc(char *str, char c);
void					test_ft_memcmp_electric_memory(void *ptr));
void					test_ft_isupper(void));
void					make_img_head(t_img_list **head);
void					test_ft_isnumber(void));
void					test_ft_isblank(void));
t_vec					ft_bumpifround(char **map, t_vec orig);
void					test_ft_strtrimc_basic2(void *ptr));
void					test_ft_strtrimc_basic3(void *ptr));
void					test_ft_strtrimc_not_found(void *ptr));
int						vec_getref(t_vec *vector, void **buffer, size_t index);
void					test_ft_strndup_size(void *ptr));
void					test_ft_strndup_null(void *ptr));
void					ft_save_north_text(t_ray *ray, char *path);
void					test_ft_atoi_negative(void *ptr));
void					test_ft_strndup_basic(void *ptr));
void					move_forward(t_ray *ray);
void					test_ft_strndup_electric_memory(void *ptr));
void					test_ft_strndup_basic2(void *ptr));
void					test_ft_atof_basic(void *ptr));
void					test_ft_atof_random(void *ptr));
int						ft_strncmp(const char *s1, const char *s2, size_t n);
void					test_ft_atof_inf_min(void *ptr));
int						key_win2(int key, void *p);
void					test_ft_atof_nan(void *ptr));
void					test_ft_atof_blanks3(void *ptr));
void					test_ft_atof_min(void *ptr));
void					test_ft_atof_exp2(void *ptr));
void					test_ft_atof_null(void *ptr));
void					test_ft_strlcpy_basic(void *ptr));
void					ft_sprite_render(t_data *data, int index);
void					test_ft_strlcpy(void));
int						ft_calcf(const char *format, ...);
int						orf_test_1(void);
int						test_myf(void);
void					move_right(t_ray *ray);

#endif
